Q: Is one GrowList implementation always better than the others?
A: GrowList is significantly faster than all of the different Sort implementations as seen from the graphical representation. However for lists of fewer elements, the GrowList may not be as 'efficient' as a simpler implementation.

Q: Why is the runtime for N insertions into a geometrically resizing list a Theta(N) operation?
A: A theta operation is an operation which shows the worst possible runtime of an operation. In a geometrically resizing list, the list size is doubled when the number of elements exceed the list size meaning that this is a Theta(N) operation as the array resize is called N times.

Q: Why is the runtime for N insertions into a arithmetically resizing list a Theta(N^2) operation?
A: Arithmetic resizing is this operation because every time a list is resized, the operation is called on itself resulting every time an element is added meaning this N^2 operation.

Q: How does the runtime per operation for the ArithGrowList compare to that of GeomGrowList and JavaGrowList? Specifically look at the non-accumulated plots and desribe the trends for how long each operation takes as a function of how many elements have already been inserted in the list.
A: GeomGrowLists are much more efficient than the ArithGrowList and JavaGrowList as we can see from the graph. This is because with a geometric resizing, this enables the array to grow much larger in a single operation whilst in an arithmetic operation you would have to have many more function calls in order to reach the same array size.
 
Q: When are there spikes in the per operation runtime graphs for each of the implementations? Do these make sense to you? Hint: some of these should and others might not. Empirical runtime can be quite messy and depends on machine specifics which will be revealed in other subsequent classes like CS61C.
A: There are spike in the operation runtime graphs due to bottlenecks, such as when arrays are being resized. This makes sense to me because when the array is fully populated, it has to be resized and this is the point where the operation takes longer to create a new array and recopy all of the elements of the array into the new array.

Q: Optional: Try changing the code for GeomGrowList to resize by a different factor. How does this effect the theoretical asymptotic runtime? How does this effect the plotted runtime?
A:

Q: Optional: Try changing the code for ArithGrowList to resize by adding a different fixed number of spots in the array. How does this effect the theoretical asymptotic runtime? How does this effect the plotted runtime?
A: