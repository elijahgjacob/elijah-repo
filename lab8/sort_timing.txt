Q: Is one sorting algorithm always faster than another?
A: Quick sort is generally considered the fastest sorting algorithm because the time complexity is O(n log n) in the best case and O(nlogn) in the average case and O(N^2) in the worst case. It tends to perform better in average cases.

Q: Above we said that BubbleSort, WipingBubbleSort, and InsertionSort each had the same Theta(N^2) asymptotic time complexity. How can you explain the differences in the plots for these three algorithms?
A: A central difference in bubble sort is that is performs by checking neighboring elements and swapping if in wrong order. While insertion sort performs by sorting one element to a partially sorted array.

Q: What information can we gain from empirical analysis of algorithms which might not be as noticeable in asymptotical bounds?
A: We can clearly see the regions on the empirical analysis graph where the runtime 'bottlenecks'. We would never be able to tell from solely asymptotical bounds.

Q: For any given sorting algorithm, does increasing the array size always mean the sorting takes longer?
A: No. There are bottlenecks in the algorithms. They are most noticeable in the BubbleSort algorithm at points where N = 605,1505 and 2605. Right after these bottlenecks, at N just after these points the sorting algorithmtakes less time.

Q: How does changing nrepeats change the plot?
A: Increasing nrepeats relieves these bottlenecks and this is because  

Q: Is your plot the exact same as your partner's plot, even with the same values of ntrials, by, and nrepeats?
A: Since my nrepeats is much higher, each of my lines seem to be much smoother than for a lower level of nrepeats which my partner had on his graph.

Q: Optional: Look at the source code for BubbleSorter to WipingBubbleSorter. After looking at the plots, can you intuitively explain why WipingBubbleSorter is usually 2x as fast as BubbleSorter? (Hint: Consider the immobility of some elements when the swapping passes are single directional (i.e. only going forward), and how this "Wiping" strategy helps deal with that issue.) Can you come up with an example that shows the difference in runtime?
A: